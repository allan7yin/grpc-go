// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: user.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_Create_FullMethodName              = "/user.UserService/Create"
	UserService_Read_FullMethodName                = "/user.UserService/Read"
	UserService_Update_FullMethodName              = "/user.UserService/Update"
	UserService_Delete_FullMethodName              = "/user.UserService/Delete"
	UserService_ReadMultiUsers_FullMethodName      = "/user.UserService/ReadMultiUsers"
	UserService_MultiUpdate_FullMethodName         = "/user.UserService/MultiUpdate"
	UserService_CreateUsersOneByOne_FullMethodName = "/user.UserService/CreateUsersOneByOne"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// rpc unary
	Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
	Read(ctx context.Context, in *SingleUserRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
	Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	Delete(ctx context.Context, in *SingleUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	// rpc server-side streaming
	ReadMultiUsers(ctx context.Context, in *MultiUsersRequest, opts ...grpc.CallOption) (UserService_ReadMultiUsersClient, error)
	// rpc client-side streaming
	MultiUpdate(ctx context.Context, opts ...grpc.CallOption) (UserService_MultiUpdateClient, error)
	// rpc bidirectional streaming
	// for practce, this will be, stream of user creation requests, and response of stream of users (impractical, for learning purpose)
	CreateUsersOneByOne(ctx context.Context, opts ...grpc.CallOption) (UserService_CreateUsersOneByOneClient, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, UserService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Read(ctx context.Context, in *SingleUserRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, UserService_Read_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, UserService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Delete(ctx context.Context, in *SingleUserRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, UserService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ReadMultiUsers(ctx context.Context, in *MultiUsersRequest, opts ...grpc.CallOption) (UserService_ReadMultiUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], UserService_ReadMultiUsers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceReadMultiUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_ReadMultiUsersClient interface {
	Recv() (*UserProfileResponse, error)
	grpc.ClientStream
}

type userServiceReadMultiUsersClient struct {
	grpc.ClientStream
}

func (x *userServiceReadMultiUsersClient) Recv() (*UserProfileResponse, error) {
	m := new(UserProfileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) MultiUpdate(ctx context.Context, opts ...grpc.CallOption) (UserService_MultiUpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], UserService_MultiUpdate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceMultiUpdateClient{stream}
	return x, nil
}

type UserService_MultiUpdateClient interface {
	Send(*UpdateUserRequest) error
	CloseAndRecv() (*SuccessResponse, error)
	grpc.ClientStream
}

type userServiceMultiUpdateClient struct {
	grpc.ClientStream
}

func (x *userServiceMultiUpdateClient) Send(m *UpdateUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceMultiUpdateClient) CloseAndRecv() (*SuccessResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SuccessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) CreateUsersOneByOne(ctx context.Context, opts ...grpc.CallOption) (UserService_CreateUsersOneByOneClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[2], UserService_CreateUsersOneByOne_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceCreateUsersOneByOneClient{stream}
	return x, nil
}

type UserService_CreateUsersOneByOneClient interface {
	Send(*CreateUserRequest) error
	Recv() (*UserProfileResponse, error)
	grpc.ClientStream
}

type userServiceCreateUsersOneByOneClient struct {
	grpc.ClientStream
}

func (x *userServiceCreateUsersOneByOneClient) Send(m *CreateUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceCreateUsersOneByOneClient) Recv() (*UserProfileResponse, error) {
	m := new(UserProfileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// rpc unary
	Create(context.Context, *CreateUserRequest) (*UserProfileResponse, error)
	Read(context.Context, *SingleUserRequest) (*UserProfileResponse, error)
	Update(context.Context, *UpdateUserRequest) (*SuccessResponse, error)
	Delete(context.Context, *SingleUserRequest) (*SuccessResponse, error)
	// rpc server-side streaming
	ReadMultiUsers(*MultiUsersRequest, UserService_ReadMultiUsersServer) error
	// rpc client-side streaming
	MultiUpdate(UserService_MultiUpdateServer) error
	// rpc bidirectional streaming
	// for practce, this will be, stream of user creation requests, and response of stream of users (impractical, for learning purpose)
	CreateUsersOneByOne(UserService_CreateUsersOneByOneServer) error
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Create(context.Context, *CreateUserRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserServiceServer) Read(context.Context, *SingleUserRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedUserServiceServer) Update(context.Context, *UpdateUserRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserServiceServer) Delete(context.Context, *SingleUserRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserServiceServer) ReadMultiUsers(*MultiUsersRequest, UserService_ReadMultiUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadMultiUsers not implemented")
}
func (UnimplementedUserServiceServer) MultiUpdate(UserService_MultiUpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiUpdate not implemented")
}
func (UnimplementedUserServiceServer) CreateUsersOneByOne(UserService_CreateUsersOneByOneServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateUsersOneByOne not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Create(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Read_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Read(ctx, req.(*SingleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Update(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Delete(ctx, req.(*SingleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ReadMultiUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MultiUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).ReadMultiUsers(m, &userServiceReadMultiUsersServer{stream})
}

type UserService_ReadMultiUsersServer interface {
	Send(*UserProfileResponse) error
	grpc.ServerStream
}

type userServiceReadMultiUsersServer struct {
	grpc.ServerStream
}

func (x *userServiceReadMultiUsersServer) Send(m *UserProfileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UserService_MultiUpdate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).MultiUpdate(&userServiceMultiUpdateServer{stream})
}

type UserService_MultiUpdateServer interface {
	SendAndClose(*SuccessResponse) error
	Recv() (*UpdateUserRequest, error)
	grpc.ServerStream
}

type userServiceMultiUpdateServer struct {
	grpc.ServerStream
}

func (x *userServiceMultiUpdateServer) SendAndClose(m *SuccessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceMultiUpdateServer) Recv() (*UpdateUserRequest, error) {
	m := new(UpdateUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_CreateUsersOneByOne_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).CreateUsersOneByOne(&userServiceCreateUsersOneByOneServer{stream})
}

type UserService_CreateUsersOneByOneServer interface {
	Send(*UserProfileResponse) error
	Recv() (*CreateUserRequest, error)
	grpc.ServerStream
}

type userServiceCreateUsersOneByOneServer struct {
	grpc.ServerStream
}

func (x *userServiceCreateUsersOneByOneServer) Send(m *UserProfileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceCreateUsersOneByOneServer) Recv() (*CreateUserRequest, error) {
	m := new(CreateUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _UserService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadMultiUsers",
			Handler:       _UserService_ReadMultiUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MultiUpdate",
			Handler:       _UserService_MultiUpdate_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateUsersOneByOne",
			Handler:       _UserService_CreateUsersOneByOne_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}
